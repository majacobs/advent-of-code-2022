use crate::harness::Harness;

pub struct Solution;

impl Harness for Solution {
    type Parsed = Vec<(u64, u64)>;
    type Part1Output = u32;
    type Part2Output = u32;

    fn parse(&self, raw_input: String) -> Self::Parsed {
        raw_input
            .lines()
            .map(|s| {
                let (left, right) = s.split_at(s.len() / 2);
                (parse(left), parse(right))
            })
            .collect()
    }

    fn part1(&self, input: &Self::Parsed) -> Self::Part1Output {
        input.iter().map(|(l, r)| unshift(l & r)).sum()
    }

    fn part2(&self, input: &Self::Parsed) -> Self::Part2Output {
        input
            .chunks(3)
            .map(|c| unshift((c[0].0 | c[0].1) & (c[1].0 | c[1].1) & (c[2].0 | c[2].1)))
            .sum()
    }
}

fn parse(s: &str) -> u64 {
    let mut x = 0;
    for c in s.chars() {
        let shift = match c {
            'a'..='z' => (c as u8) - b'a',
            'A'..='Z' => (c as u8) - b'A' + 26,
            _ => unreachable!(),
        };
        x |= 1 << shift;
    }
    x
}

fn unshift(n: u64) -> u32 {
    match n {
        0x0000000000000001 => 1,
        0x0000000000000002 => 2,
        0x0000000000000004 => 3,
        0x0000000000000008 => 4,
        0x0000000000000010 => 5,
        0x0000000000000020 => 6,
        0x0000000000000040 => 7,
        0x0000000000000080 => 8,
        0x0000000000000100 => 9,
        0x0000000000000200 => 10,
        0x0000000000000400 => 11,
        0x0000000000000800 => 12,
        0x0000000000001000 => 13,
        0x0000000000002000 => 14,
        0x0000000000004000 => 15,
        0x0000000000008000 => 16,
        0x0000000000010000 => 17,
        0x0000000000020000 => 18,
        0x0000000000040000 => 19,
        0x0000000000080000 => 20,
        0x0000000000100000 => 21,
        0x0000000000200000 => 22,
        0x0000000000400000 => 23,
        0x0000000000800000 => 24,
        0x0000000001000000 => 25,
        0x0000000002000000 => 26,
        0x0000000004000000 => 27,
        0x0000000008000000 => 28,
        0x0000000010000000 => 29,
        0x0000000020000000 => 30,
        0x0000000040000000 => 31,
        0x0000000080000000 => 32,
        0x0000000100000000 => 33,
        0x0000000200000000 => 34,
        0x0000000400000000 => 35,
        0x0000000800000000 => 36,
        0x0000001000000000 => 37,
        0x0000002000000000 => 38,
        0x0000004000000000 => 39,
        0x0000008000000000 => 40,
        0x0000010000000000 => 41,
        0x0000020000000000 => 42,
        0x0000040000000000 => 43,
        0x0000080000000000 => 44,
        0x0000100000000000 => 45,
        0x0000200000000000 => 46,
        0x0000400000000000 => 47,
        0x0000800000000000 => 48,
        0x0001000000000000 => 49,
        0x0002000000000000 => 50,
        0x0004000000000000 => 51,
        0x0008000000000000 => 52,
        _ => unreachable!(),
    }
}
